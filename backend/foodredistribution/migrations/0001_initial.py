# Generated by Django 5.2.2 on 2025-06-08 16:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zipcode', models.CharField(blank=True, max_length=20, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_donor', models.BooleanField(default=False)),
                ('is_requester', models.BooleanField(default=False)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('organization_name', models.CharField(blank=True, max_length=255, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClaimedDonation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('claim_date', models.DateTimeField(auto_now_add=True)),
                ('ai_matching_score', models.FloatField(blank=True, help_text='AI match score between donation and requester (0-1)', null=True)),
                ('distance_km', models.FloatField(blank=True, help_text='Distance in kilometers between donor and requester', null=True)),
                ('ml_match_features', models.JSONField(blank=True, help_text='Features used for matching in offline ML', null=True)),
                ('ml_label', models.CharField(blank=True, help_text='Label assigned during offline ML matching', max_length=100, null=True)),
                ('ml_training_flag', models.BooleanField(default=False, help_text='If this claim was used for offline ML training')),
                ('claimed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('comments', models.TextField(blank=True)),
                ('is_helpful', models.BooleanField(default=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('claimed_donation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='foodredistribution.claimeddonation')),
            ],
        ),
        migrations.CreateModel(
            name='FoodDonation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('quantity', models.FloatField(help_text='Quantity in kilograms', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags e.g., vegetarian,gluten-free', max_length=255)),
                ('donation_date', models.DateTimeField(auto_now_add=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('collected', 'Collected'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', max_length=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='donation_images/')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_freshness_score', models.FloatField(blank=True, help_text='Freshness score 0-1 from AI model', null=True)),
                ('ai_category_prediction', models.CharField(blank=True, help_text='Predicted category by AI', max_length=100, null=True)),
                ('ai_confidence_score', models.FloatField(blank=True, help_text='Confidence score 0-1 from AI prediction', null=True)),
                ('ml_features_extracted', models.JSONField(blank=True, help_text='Raw features extracted for offline ML', null=True)),
                ('ml_label_assigned', models.CharField(blank=True, help_text='Label assigned during offline ML process', max_length=100, null=True)),
                ('ml_training_flag', models.BooleanField(default=False, help_text='If this data was used for training offline ML model')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='foodredistribution.foodcategory')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donations', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='foodredistribution.location')),
            ],
        ),
        migrations.CreateModel(
            name='DonationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('donation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='foodredistribution.fooddonation')),
            ],
        ),
        migrations.AddField(
            model_name='claimeddonation',
            name='donation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to='foodredistribution.fooddonation'),
        ),
        migrations.CreateModel(
            name='FoodRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('quantity', models.FloatField(help_text='Quantity in kilograms', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('fulfilled', 'Fulfilled'), ('cancelled', 'Cancelled')], default='pending', max_length=10)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_tags', models.CharField(blank=True, help_text='Comma-separated preferred tags', max_length=255)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='foodredistribution.foodcategory')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='foodredistribution.location')),
            ],
        ),
        migrations.CreateModel(
            name='AIAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(help_text="AI action e.g., 'prediction', 'matching', 'flagged_for_review'", max_length=100)),
                ('details', models.JSONField(blank=True, help_text='Detailed AI metadata and scores', null=True)),
                ('user', models.ForeignKey(blank=True, help_text='User involved, if any', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('claimed_donation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='foodredistribution.claimeddonation')),
                ('donation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='foodredistribution.fooddonation')),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='foodredistribution.foodrequest')),
            ],
        ),
    ]
